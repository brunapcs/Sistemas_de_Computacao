Bruna Paracat 
1611896
–
Conrado Costa 
1710234

–
QUESTÃO 1) Execute o programa dado (exemplo de uso de semáforos) e explique sua execução. 
-----------------------------------------------------
#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

union semun {
	int val; 
	struct semid_ds *buf;
	ushort *array;
};


int setSemValue(int semId);
void delSemValue(int semId);
int semaforoP(int semId);
int semaforoV(int semId);



int main(int argc, char* argv[]){
	int i;
	char letra = 'o';
	int semId;
	
	if (argc > 1){
		semId = semget (8752, 1, 0666 | IPC_CREAT);
		setSemValue(semId);
		letra = 'x';
		sleep(2);
	}
	else{
		while ((semId = semget (8752, 1, 0666)) < 0){
			putchar ('.'); fflush(stdout);
			sleep(1);
		}
	}
	
	for (i = 0; i<10; i++){
		semaforoP(semId);
		putchar(toupper(letra)); fflush(stdout);
		semaforoV(semId);
		sleep (rand() %2);
	}
	printf("\nProcesso %d terminou\n", getpid());
	
	if (argc > 1 ){
		sleep(10);
		delSemValue(semId);
	}
	
	return 0;
}

int setSemValue(int semId) { 
	union semun semUnion; 
	semUnion.val = 1; 
	return semctl(semId, 0, SETVAL, semUnion); 
}

void delSemValue(int semId) { 
	union semun semUnion; 
	semctl(semId, 0, IPC_RMID, semUnion); 
}

int semaforoP(int semId) { 
	struct sembuf semB; 
	semB.sem_num = 0; 
	semB.sem_op = -1; 
	semB.sem_flg = SEM_UNDO; 
	semop(semId, &semB, 1); 
	return 0; 
}

int semaforoV(int semId) { 
	struct sembuf semB; 
	semB.sem_num = 0; 
	semB.sem_op = 1; 
	semB.sem_flg = SEM_UNDO; 
	semop(semId, &semB, 1); 
	return 0; 
} 
-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO
$ gcc -o semaforo semaforo.c 
$ ./semaforo & 
$.............
$./semaforo 1 
OoOoXxOoXxOoOoOoOoOoOoXxOoXxXxXxXxXxXx
Processo 1264 terminou
Xx
Processo 1276 terminou

-----------------------------------------------------
CONCLUSÃO

 Para argc < 1 o programa executa em background imprimindo "." na tela. O programa não imprime "O" e "o" pois o semáforo ainda não foi criado. Quando executamos ./semaforo 1 , argc>1 ele passa a executar em foreground e os semáforos são criados. Portanto surgem na tela Oo(indicam entrada e saida na regiao crítica antes da criação do semáforo) e Xx indicando entrada e saída na região crítica. 

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include<errno.h>
#include <arpa/inet.h>
#include "server.h"
#include "permissoes.h"
#include <sys/dir.h>
#include <sys/param.h>
#include <sys/stat.h>
#include <string.h>
#include <time.h>

char pathname[MAXPATHLEN];

#define BUFSIZE 1024

/*
 * error - wrapper for perror
 */
void error(char *msg) {
    perror(msg);
    exit(1);
}

int main(int argc, char **argv) {
    int sockfd; /* socket */
    int portno; /* port to listen on */
    int clientlen; /* byte size of client's address */
    struct sockaddr_in serveraddr; /* server's addr */
    struct sockaddr_in clientaddr; /* client addr */
    struct hostent *hostp; /* client host info */
    char buf[BUFSIZE]; /* message buf */
    char *hostaddrp; /* dotted decimal host addr string */
    int optval; /* flag value for setsockopt */
    int n; /* message byte size */
    
    /*
     * check command line arguments
     */
    if (argc != 2) {
        fprintf(stderr, "usage: %s <port>\n", argv[0]);
        exit(1);
    }
    portno = atoi(argv[1]);
    
    /*
     * socket: create the parent socket
     */
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0)
        error("ERROR opening socket");
    
    /* setsockopt: Handy debugging trick that lets
     * us rerun the server immediately after we kill it;
     * otherwise we have to wait about 20 secs.
     * Eliminates "ERROR on binding: Address already in use" error.
     */
    optval = 1;
    setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR,
               (const void *)&optval , sizeof(int));
    
    /*
     * build the server's Internet address
     */
    bzero((char *) &serveraddr, sizeof(serveraddr));
    serveraddr.sin_family = AF_INET;
    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);
    serveraddr.sin_port = htons((unsigned short)portno);
    
    /*
     * bind: associate the parent socket with a port
     */
    if (bind(sockfd, (struct sockaddr *) &serveraddr,
             sizeof(serveraddr)) < 0)
        error("ERROR on binding");
    
    /*
     * main loop: wait for a datagram, then echo it
     */
    clientlen = sizeof(clientaddr);
    while (1) {
        /*
         * recvfrom: receive a UDP datagram from a client
         */
        bzero(buf, BUFSIZE);
        n = recvfrom(sockfd, buf, BUFSIZE, 0, (struct sockaddr *) &clientaddr, &clientlen);
        if (n < 0) error("ERROR in recvfrom");

        /*
         * gethostbyaddr: determine who sent the datagram
         */
        hostp = gethostbyaddr((const char *)&clientaddr.sin_addr.s_addr,
                              sizeof(clientaddr.sin_addr.s_addr), AF_INET);
        if (hostp == NULL)
            error("ERROR on gethostbyaddr");
        hostaddrp = inet_ntoa(clientaddr.sin_addr);
        if (hostaddrp == NULL)
            error("ERROR on inet_ntoa\n");
        printf("server received datagram from %s (%s)\n",
               hostp->h_name, hostaddrp);
        printf("server received %ld/%d bytes: %s\n", strlen(buf), n, buf);
    
        // ********* ESSA PARTE QUE NOS INTERESSA *********
        
        int ver=0; //int para receber o retorno da funcao de verificacao de permissoes
        INFO *msg = (INFO *)malloc(sizeof(INFO));
        char *req;
        
        /* quebra mensagem carregada em buf e salva em parametros da estrutura msg */
        /* salva em req a requisicao sendo feita */
        req = leitura(buf, msg);
        
        // *********  VERIFICANDO REQUISICAO ***********
        
            //write in file or create new file
        if(!strcmp(req, "WR-REQ")){
            ver=perm_check(msg->path, msg->ClientID);
            if(ver == 2){  // retornou 2 eh sinal de arquivo novo (nao encontrou entrada no perm.txt)
                printf("Arquivo novo");
                adicionaServerList(msg->path, msg->ClientID, msg->ownerPerm, msg->otherPerm);
                 WrReq1(msg,buf ,msg->otherPerm, msg->ownerPerm); //concateno em wr a resposta da funcao
            }
            else if(ver == 0){
                printf(" voce nao tem permissao de fazer isto com esse arquivo");
                exit(1);
            }
            else{
                puts("arquivo ja existe");
                WrReq(msg, buf);
            }
            
        }
            //remove file
       // else if(!strcmp(req, "W-REQ"){
            
       // }
    
            //read from file
        else if(!strcmp(req, "RD-REQ")){
            ver = perm_check(msg->path, msg->ClientID);
            if( ver == 2){
                printf(" File you are trying to read from doesnt exists");
                exit(1);
            }
            RdReq(msg, buf);
        }
            //show file stat
        else if(!strcmp(req, "FI-REQ")){
            FiReq(msg, buf);
        }
        
            //create new directory
        else if(!strcmp(req, "DC-REQ")){
            perm_check(msg->path, msg->ClientID);
            if(msg == 0){
                printf("voce nao tem permissao de criar itens nesse diretorio"); exit(1); 
            }
             DcReq(msg, buf);
        }
        
            //show content in a directory
        else if(!strcmp(req, "DL-REQ")){
            DlReq(msg, buf); 
        }
        
            //remoce directory
        else if(!strcmp(req, "DR-REQ")){
            if(perm_check(msg->path, msg->ClientID) == 0 ) {
                printf(" voce nao tem permissao para remover esse diretorio");
                exit(1);
            }
            DrReq(msg, buf);
        }
        
        
        
        // sendto: echo the input back to the client
       
        n = sendto(sockfd, buf, strlen(buf), 0,(struct sockaddr *) &clientaddr, clientlen);
        if (n < 0)error("ERROR in sendto");
    }
}
